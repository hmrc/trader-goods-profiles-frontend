# microservice specific routes

->          /                                                                                       app.profile.Routes
->          /                                                                                       app.newUkims.Routes
->          /                                                                                       app.problem.Routes
->          /                                                                                       app.categorisation.Routes
->          /                                                                                       app.goodsRecord.Routes
->          /                                                                                       app.goodsProfile.Routes
->          /                                                                                       app.download.Routes

->          /hmrc-frontend                                                                          hmrcfrontend.Routes

GET         /                                                                                       controllers.IndexController.onPageLoad()

GET         /assets/*file                                                                           controllers.Assets.versioned(path="/public", file: Asset)

GET         /language/:lang                                                                         controllers.LanguageSwitchController.switchToLanguage(lang: String)

GET         /refresh-session                                                                        controllers.KeepAliveController.keepAlive()

GET         /account/sign-out-survey                                                                controllers.auth.AuthController.signOut()
GET         /account/sign-out                                                                       controllers.auth.AuthController.signOutNoSurvey()
GET         /account/sign-out-no-session                                                            controllers.auth.AuthController.signOutNoSession()
GET         /signed-out                                                                             controllers.auth.SignedOutController.onPageLoad()

GET         /homepage                                                                               controllers.HomePageController.onPageLoad()

GET         /create-record/commodity-code-result                                                    controllers.HasCorrectGoodsController.onPageLoadCreate(mode: Mode = NormalMode)
POST        /create-record/commodity-code-result                                                    controllers.HasCorrectGoodsController.onSubmitCreate(mode: Mode = NormalMode)
GET         /create-record/commodity-code-result/check                                              controllers.HasCorrectGoodsController.onPageLoadCreate(mode: Mode = CheckMode)
POST        /create-record/commodity-code-result/check                                              controllers.HasCorrectGoodsController.onSubmitCreate(mode: Mode = CheckMode)

GET         /update-record/:recordId/commodity-code-result                                          controllers.HasCorrectGoodsController.onPageLoadUpdate(mode: Mode = NormalMode, recordId: String)
POST        /update-record/:recordId/commodity-code-result                                          controllers.HasCorrectGoodsController.onSubmitUpdate(mode: Mode = NormalMode, recordId: String)
GET         /update-record/:recordId/commodity-code-result/check                                    controllers.HasCorrectGoodsController.onPageLoadUpdate(mode: Mode = CheckMode, recordId: String)
POST        /update-record/:recordId/commodity-code-result/check                                    controllers.HasCorrectGoodsController.onSubmitUpdate(mode: Mode = CheckMode, recordId: String)

GET         /update-record/:recordId/categorisation/longer-commodity-code-result                    controllers.HasCorrectGoodsController.onPageLoadLongerCommodityCode(mode: Mode = NormalMode,recordId: String)
POST        /update-record/:recordId/categorisation/longer-commodity-code-result                    controllers.HasCorrectGoodsController.onSubmitLongerCommodityCode(mode: Mode = NormalMode,recordId: String)
GET         /update-record/:recordId/categorisation/longer-commodity-code-result/check              controllers.HasCorrectGoodsController.onPageLoadLongerCommodityCode(mode: Mode = CheckMode,recordId: String)
POST        /update-record/:recordId/categorisation/longer-commodity-code-result/check              controllers.HasCorrectGoodsController.onSubmitLongerCommodityCode(mode: Mode = CheckMode,recordId: String)

GET         /update-record/:recordId/create-advice/start                                            controllers.AdviceStartController.onPageLoad(recordId:String)
POST        /update-record/:recordId/create-advice/start                                            controllers.AdviceStartController.onSubmit(recordId:String)

GET         /update-record/:recordId/create-advice/check-your-answers                               controllers.CyaRequestAdviceController.onPageLoad(recordId:String)
POST        /update-record/:recordId/create-advice/check-your-answers                               controllers.CyaRequestAdviceController.onSubmit(recordId:String)

GET         /update-record/:recordId/create-advice/success                                          controllers.AdviceSuccessController.onPageLoad(recordId:String)

GET         /update-record/:recordId/create-advice/email                                            controllers.EmailController.onPageLoad(mode: Mode = NormalMode, recordId:String)
POST        /update-record/:recordId/create-advice/email                                            controllers.EmailController.onSubmit(mode: Mode = NormalMode, recordId:String)
GET         /update-record/:recordId/create-advice/email/check                                      controllers.EmailController.onPageLoad(mode: Mode = CheckMode, recordId:String)
POST        /update-record/:recordId/create-advice/email/check                                      controllers.EmailController.onSubmit(mode: Mode = CheckMode, recordId:String)

GET         /update-record/:recordId/create-advice/name                                             controllers.NameController.onPageLoad(mode: Mode = NormalMode, recordId: String)
POST        /update-record/:recordId/create-advice/name                                             controllers.NameController.onSubmit(mode: Mode = NormalMode, recordId: String)
GET         /update-record/:recordId/create-advice/name/check                                       controllers.NameController.onPageLoad(mode: Mode = CheckMode, recordId: String)
POST        /update-record/:recordId/create-advice/name/check                                       controllers.NameController.onSubmit(mode: Mode = CheckMode, recordId: String)


GET         /goods-record/:recordId/to-review/review-reason                                         controllers.ReviewReasonController.onPageLoad(recordId: String)
POST        /goods-record/:recordId/to-review/review-reason                                         controllers.ReviewReasonController.onSubmit(recordId: String)

GET         /help-and-support                                                                       controllers.HelpAndSupportController.onPageLoad()

GET         /update-record/:recordId/withdraw-request                                               controllers.WithdrawAdviceStartController.onPageLoad(recordId: String)
POST        /update-record/:recordId/withdraw-request                                               controllers.WithdrawAdviceStartController.onSubmit(recordId: String)

GET         /update-record/:recordId/withdraw-request/success                                       controllers.WithdrawAdviceSuccessController.onPageLoad(recordId: String)

GET         /update-record/:recordId/withdraw-request/reason                                        controllers.ReasonForWithdrawAdviceController.onPageLoad(recordId: String)
POST        /update-record/:recordId/withdraw-request/reason                                        controllers.ReasonForWithdrawAdviceController.onSubmit(recordId: String)

# this url must be the last url on this page so it becomes the default if no other urls match
GET         /*path                                                                                  controllers.PageNotFoundController.onPageLoad(path: String)
